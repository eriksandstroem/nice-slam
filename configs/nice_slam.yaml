coarse: True # use coarse grid or not
sync_method: strict # strict, loose or free
scale: 1 # only used by imap
verbose: True
occupancy: True # always true for NICE-SLAM. False for iMAP
low_gpu_mem: True # empty cuda cache after each optimization loop for tracker and mapper
grid_len:
  coarse: 2 # voxel grid size in meters
  middle: 0.32 # voxel grid size in meters
  fine: 0.16 # voxel grid size in meters
  color: 0.16 # voxel grid size in meters
  bound_divisible: 0.32 # not used anymore by NICE-SLAM. Legacy experiment
pretrained_decoders:
  coarse: pretrained/coarse.pt
  middle_fine: pretrained/middle_fine.pt # one ckpt contain both middle and fine
meshing:
  level_set: 0 # level set is before sigmoid which is why it is 0 and not 0.5
  resolution: 256 # number of samples along each axis for marching cubes. We have non-cubic voxels during meshing
  eval_rec: False # whether to save the mesh at the final iteration for later evaluation. Saves mesh with more accurate mask.
  clean_mesh: True
  depth_test: False # ----------------------------------------ASK------------------------------------------------
  mesh_coarse_level: False # use the coarse level to show the forecasted geometry 
  clean_mesh_bound_scale: 1.02 # this scales the mesh bound from the open3d tsdf fusion pipeline to find where to reconstruct the mesh of NICE-SLAM.
  get_largest_components: False # part of mesh cleaning. 
  color_mesh_extraction_method: direct_point_query # or "render_ray_along_normal (only for iMAP)
  remove_small_geometry_threshold: 0.2 # if get_largest_components is False, filter based on area threshold
tracking:
  ignore_edge_W: 20 # ignores to sample rays falling closer than the number to the edge of the image
  ignore_edge_H: 20
  use_color_in_tracking: True
  device: "cuda:0"
  handle_dynamic: True # filter away pixel rays that have too high uncertainty. This leverages the observed "gt depth".
  vis_freq: 50 # frame frequency of visualizing the tracking performance
  vis_inside_freq: 25 # iteration frequency of visualizing the tracking performance
  w_color_loss: 0.5 # weight of color loss term
  separate_LR: False # use separate learning rate for translation and rotation (quaternion). Uses 1/5 of the tracking.lr for the rotation
  const_speed_assumption: True # if True, adds the previous relative pose change between the last two frames. If False, just copies the last known pose as initial solution.
  no_vis_on_first_frame: True
  gt_camera: False
  lr: 0.001
  pixels: 200 # number of sampled rays per frame
  iters: 10 # how many iterations of optimizer per tracking stage
local_loop_closure:
  do: True
  temporal_threshold: 200 # window of frames that are considered to be in active region
mapping:
  device: "cuda:0"
  color_refine: True # refine color decoder at the end of trajectory capture as post processing step
  middle_iter_ratio: 0.4 # X times the iters variable gives the number of iterations for middle optimization
  fine_iter_ratio: 0.6 # (fine_iter_ratio-middle_iter_ratio)*iters gives the number of iterations for fine optimization
  every_frame: 5 # map only every X frames
  BA: True # Do Bundle Adjustment or not
  BA_cam_lr: 0.001
  fix_fine: True # whether to fix the weights of the decoder for the fine geometry grid
  fix_color: False # whether to fix the weights of the decoder for the fine color grid
  no_vis_on_first_frame: True
  no_mesh_on_first_frame: True
  no_log_on_first_frame: True
  vis_freq: 50 # frame frequency of visualizing the mapping performance
  vis_inside_freq: 25 # iteration frequency of visualizing the mapping performance
  mesh_freq: 50 # meshing frame frequency
  ckpt_freq: 500 # checkpoint saving frame frequency
  keyframe_every: 50 # add frame to keyframe list every X frames
  mapping_window_size: 5 # X - 2 keyframes used for BA and mapping. 2X used for color refinement step (if used)
  w_color_loss: 0.2 # weight of color loss term
  frustum_feature_selection: True # select only features in the frustum of the current frame. Otherwise, the union of features of all keyframes and the current frame will be optimized.
  keyframe_selection_method: 'overlap' # overlap or global. Overlap is described in the paper. Global is just random keyframe selection
  save_selected_keyframes_info: False # saves the keyframes selected at the current mapping frame
  lr_first_factor: 5 # learning rate for first frame mapping
  lr_factor: 1 # learning rate for all frames but the first frame
  pixels: 1000 # number of sampled rays per frame
  iters_first: 1500 # how many iterations of optimizer for first frame
  iters: 60 # how many iterations of optimizer per mapping stage
  stage:
    coarse:
      decoders_lr: 0.0 # learning rate of mlp decoders (we only optimize the color decoder typically)
      coarse_lr: 0.001
      middle_lr: 0.0
      fine_lr: 0.0
      color_lr: 0.0
    middle:
      decoders_lr: 0.0
      coarse_lr: 0.0
      middle_lr: 0.1
      fine_lr: 0.0
      color_lr: 0.0
    fine:
      decoders_lr: 0.0
      coarse_lr: 0.0
      middle_lr: 0.005
      fine_lr: 0.005
      color_lr: 0.0
    color:
      decoders_lr: 0.005
      coarse_lr: 0.0
      middle_lr: 0.005
      fine_lr: 0.005
      color_lr: 0.005
cam:
  H: 680 # height of images in pixels
  W: 1200 # width of images in pixels
  fx: 600.0
  fy: 600.0
  cx: 599.5
  cy: 339.5
  png_depth_scale: 6553.5 # for depth image in png format. Divides the cv.imread image to get meters
  crop_edge: 0 # crop depth and color image. The code adapts the intrinsics automatically
rendering:
  N_samples: 32 # samples used for stratified sampling
  N_surface: 16 # samples close to the observed depth
  N_importance: 0 # only used for iMAP
  lindisp: False # -----------------------ASK----------------------- not clear what this is again, but zihan did not know - copied from nerf.
  perturb: 0.0 # controls the randomness in stratified sampling. Should be a boolean. When 0.0, no randomness is used in sampling along the ray.
data:
  dim: 3 # dimension of input to fourier embedding i.e. 3D coordinate
model:
  c_dim: 32 # feature dimension
  coarse_bound_enlarge: 2 # enlarge bound for coarse grid to avoid edge effects when the voxel size is large
  pos_embedding_method: fourier # fourier, nerf, same or fc_relu
